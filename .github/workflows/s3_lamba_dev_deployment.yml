name: S3 Lambda Dev Deployment

on:
  push:
    branches-ignore:
      - main

jobs:
  pre_build:
    runs-on: ubuntu-latest
    env:
      AWS_BUCKET_NAME: python-template-fast-api-serverless-aws-dev
      DIST_NAME: function-dev
      DIST_PATH: function.zip
    outputs:
      AWS_BUCKET_NAME: ${{ steps.bucket_name.outputs.bucket }}
      DIST_NAME: ${{ env.DIST_NAME }}
      DIST_PATH: ${{ env.DIST_PATH }}
    steps:
      - name: "Create bucket_name_suffix Output"
        id: bucket_name_suffix
        run: |
          suffix=$(echo ${{ github.ref_name }} | sed 's/\//-/')
          echo "suffix=$suffix" >> $GITHUB_OUTPUT

      - name: "Create bucket_name Output"
        id: bucket_name
        run: |
          bucket_name=$(echo ${{ env.AWS_BUCKET_NAME }}-${{ steps.bucket_name_suffix.outputs.suffix }})
          echo "bucket=$bucket_name" >> $GITHUB_OUTPUT

  build:
    runs-on: ubuntu-latest
    needs: pre_build
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # - name: Use Python
      #   uses: actions/setup-python@v4
      #   id: cp310
      #   with:
      #     python-version: '3.10.10'
      #     cache: 'pip'
      # - run: pip install -r requirements.txt
      # - run: pipx run --python '${{ steps.cp310.outputs.python-path }}' nox --version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      
      # TODO: Add tests
      # - name: Test with pytest
      #   run: |
      #     pytest

      - name: Make Virtual Environment
        run: |
          pip install --upgrade pip
          python3 -m venv env
          source env/bin/activate
          echo "VIRTUAL ENV:" $VIRTUAL_ENV

      - name: Install zip
        uses: montudor/action-zip@v1

      - name: Zip output
        run: |
          pwd
          cd /home/runner/.local/lib/python3.10/site-packages
          zip -r9 function.zip .
          cd
          zip -g function.zip -r ./work/python-template-fast-api-serverless-aws/python-template-fast-api-serverless-aws/app

      - name: Create dist Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ needs.pre_build.outputs.DIST_NAME }}
          path: ${{ needs.pre_build.outputs.DIST_PATH }}
          retention-days: 1

  configure_s3_dev:
    runs-on: ubuntu-latest
    needs: [pre_build, build]
    if: github.ref != 'refs/heads/main'
    steps:
      # TODO: Add to workflows
      # - name: Clone workflow repository
      #   uses: actions/checkout@v3
      #   with:
      #     repository: thomasmendez/workflows
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format - Existing Bucket
        id: fmt-remote
        run: terraform -chdir=terraform/development/remote fmt -check

      - name: Terraform Init - Existing Bucket
        id: init-remote
        run: terraform -chdir=terraform/development/remote init -backend-config="region=us-east-2" -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Terraform Validate - Existing Bucket
        id: validate-remote
        run: terraform -chdir=terraform/development/remote validate -no-color

      - name: Terraform Plan - Existing Bucket
        id: plan-remote
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="us-east-2"
          terraform -chdir=terraform/development/remote plan -var="aws_bucket_name=${{ needs.pre_build.outputs.AWS_BUCKET_NAME }}" -no-color
        continue-on-error: true

      - name: Update Pull Request - Existing Bucket
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan-remote.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Format - Create Bucket
        id: fmt-create
        if: steps.plan-remote.outcome == 'failure'
        run: terraform -chdir=terraform/development/create fmt -check

      - name: Terraform Init - Create Bucket
        id: init-create
        if: steps.plan-remote.outcome == 'failure'
        run: terraform -chdir=terraform/development/create init -backend-config="region=us-east-2" -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"

      - name: Terraform Validate - Create Bucket
        id: validate-create
        if: steps.plan-remote.outcome == 'failure'
        run: terraform -chdir=terraform/development/create validate -no-color

      - name: Terraform Plan - Create Bucket
        id: plan-create
        if: steps.plan-remote.outcome == 'failure'
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="us-east-2"
          terraform -chdir=terraform/development/create plan -var="aws_bucket_name=${{ needs.pre_build.outputs.AWS_BUCKET_NAME }}" -no-color
        continue-on-error: true

      - name: Update Pull Request - Create Bucket
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request' && steps.plan-remote.outcome == 'failure'
        env:
          PLAN: "terraform\n${{ steps.plan-create.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status - Existing Bucket && Create Bucket
        if: steps.plan-remote.outcome == 'failure' && steps.plan-create.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply - Existing Bucket
        id: apply-remote
        if: steps.plan-remote.outcome == 'success'
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="us-east-2"
          terraform -chdir=terraform/development/remote import -var="aws_bucket_name=${{ needs.pre_build.outputs.AWS_BUCKET_NAME }}" aws_s3_bucket.bucketdev ${{ needs.pre_build.outputs.AWS_BUCKET_NAME }}
          terraform -chdir=terraform/development/remote apply -var="aws_bucket_name=${{ needs.pre_build.outputs.AWS_BUCKET_NAME }}" -auto-approve

      - name: Terraform Apply - Create Bucket
        id: apply-create
        if: steps.plan-create.outcome == 'success'
        run: |
          export AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}"
          export AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          export AWS_DEFAULT_REGION="us-east-2"
          terraform -chdir=terraform/development/create apply -var="aws_bucket_name=${{ needs.pre_build.outputs.AWS_BUCKET_NAME }}" -auto-approve

  sync_s3_dev:
    runs-on: ubuntu-latest
    needs: [pre_build, build, configure_s3_dev]
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # - name: Retrieve dist files
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: ${{ needs.pre_build.outputs.DIST_NAME }}
      #     path: ${{ needs.pre_build.outputs.DIST_PATH }}
    
      - name: Where is my file
        run: |
          pwd
          ls

      - name: Move file
        run: |
          mkdir dist
          mv function.zip dist
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      - name: Deploy lambda function to S3 bucket
        run: sudo aws s3 sync dist/function.zip s3://${{ needs.pre_build.outputs.AWS_BUCKET_NAME }}